#!/bin/bash

DATE=$(date +"%Y%m%d-%H%M")

make_build(){
	print "Make kernel dtb..." green
		export CROSS_COMPILE=$(pwd)/gcc/bin/aarch64-linux-android-
		export CROSS_COMPILE_ARM32=$(pwd)/gcc32/bin/arm-eabi-
		make O=out ARCH=arm64 $1
		make -j$(nproc --all) O=out ARCH=arm64
}

make_clean(){
	rm -rf out
}

send_msg(){
	print "${1}" green
	curl -s -X POST https://api.telegram.org/bot"${bot_token}"/sendMessage \
		-d parse_mode="Markdown" \
		-d chat_id="${chat_id}" \
		-d text="${1}"
}

send_file(){
	print "Sending file..." green
	curl -F chat_id="${chat_id}" \
		-F caption="Build Succes! | RolleStrix | #funproject" \
		-F document=@"${1}" \
		 https://api.telegram.org/bot"${bot_token}"/sendDocument
}

mkzip(){
	print "Generate zip file..." green

	if [ -f $(pwd)/out/arch/arm64/boot/Image.gz ]; then
		cp $(pwd)/out/arch/arm64/boot/Image.gz  anykernel
		cd anykernel
		zip -r9 ../$1 * -x .git README.md *placeholder
		cd ..
		send_file $1
	else
		send_msg "Build Failed!, Please Check Again"
		print "Build error !" red
		exit 1
	fi
}

print(){
	echo ""
	case ${2} in
		"red")
		echo -e "\033[31m $1 \033[0m";;
		"green")
		echo -e "\033[32m $1 \033[0m";;
		*)
		echo $1
		;;
	esac
}

gen_toolchain(){
	print "Cloning toolchain files..." green
		git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-18.1 gcc
		git clone --depth=1 https://github.com/chips-project/arm-eabi gcc32
	fi
		git clone --depth=1 https://github.com/Xenoms/AnyKernel33 -b master anykernel
}

build(){

	export type="${1} ${2} ${3}"

	make_clean

	if [ $2 == "-oldcam" ]
	then
		make_build "${1}-old_defconfig"
	else
		make_build "${1}-new_defconfig"
	fi
		mkzip "$KERNELNAME-$LOCALVERSION-${1}${2}${3}-$DATE.zip"
}
